import ComposableArchitecture
import Foundation

struct FavoritesFeature: Reducer {
    struct State: Equatable {
        var favoriteSports: Set<String> = []
        var favoriteSportsData: [AviationSport] = []
        var isLoading = false
        var errorMessage: String?
        
        init() {}
    }
    
    enum Action: Equatable {
        case onAppear
        case loadFavorites
        case favoritesResponse([AviationSport])
        case loadError(String)
        case removeFavorite(String) // sportId
        case favoriteRemoved(String) // sportId
    }
    
    @Dependency(\.aviationSportsClient) var aviationSportsClient
    
    var body: some ReducerOf<Self> {
        Reduce { state, action in
            switch action {
            case .onAppear:
                state.isLoading = true
                return .send(.loadFavorites)
                
            case .loadFavorites:
                state.isLoading = true
                state.errorMessage = nil
                return .run { send in
                    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–ø–æ—Ä—Ç–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —É–ª—é–±–ª–µ–Ω—ñ
                    let allSports = await aviationSportsClient.getSports(.all, "Global")
                    await send(.favoritesResponse(allSports))
                }
                
            case let .favoritesResponse(sports):
                state.isLoading = false
                print("üìã FavoritesFeature: Received \(sports.count) sports")
                print("‚ù§Ô∏è Current favoriteSports: \(state.favoriteSports)")
                print("üîç Looking for favorites in: \(state.favoriteSports)")
                
                // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —É–ª—é–±–ª–µ–Ω—ñ —Å–ø–æ—Ä—Ç–∏
                state.favoriteSportsData = sports.filter { sport in
                    let isFavorite = state.favoriteSports.contains(sport.id.uuidString)
                    print("üîç Sport '\(sport.name)' (\(sport.id.uuidString)) is favorite: \(isFavorite)")
                    if isFavorite {
                        print("‚úÖ Found favorite: \(sport.name)")
                    }
                    return isFavorite
                }
                
                print("‚úÖ Filtered to \(state.favoriteSportsData.count) favorite sports")
                print("üìä Final favoriteSportsData: \(state.favoriteSportsData.map { $0.name })")
                return .none
                
            case let .loadError(error):
                state.isLoading = false
                state.errorMessage = error
                return .none
                
            case let .removeFavorite(sportId):
                state.favoriteSports.remove(sportId)
                return .send(.favoriteRemoved(sportId))
                
            case let .favoriteRemoved(sportId):
                // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
                return .none
            }
        }
    }
}
